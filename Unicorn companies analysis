import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import re
from datetime import datetime

#To upload database
unicorn_companies = pd.read_csv(r'C:\Users\okolo\Downloads\Unicorn_Companies.csv')
unicorn_companies


unicorn_companies.info()



#To clean the valuation column
Valuation_B = (unicorn_companies['Valuation']*1000000000)
unicorn_companies['Valuation_B'] = unicorn_companies['Valuation_B'].str.replace('$', '').str.replace('B','').astype(float)
print(unicorn_companies['Valuation_B'])



# To clean the funding column
# to remove the $ sign:
unicorn_companies['Funding'] = unicorn_companies['Funding'].str.replace('$', '')
unicorn_companies['Funding'] = unicorn_companies['Funding'].replace('Unknown', np.nan)
unicorn_companies['Funding'] = pd.to_numeric(unicorn_companies['Funding'], errors='coerce').astype('Int64')

# To Remove the 'M' and 'B' signs)
def remove_currency_suffix(value):
    # Use regex to extract the numeric part
    match = re.search(r'(\d+)', value)
    if match:
        amount = match.group()
        
        # Use regex to determine the scale ('B' or 'M') and adjust the value accordingly
        scale = value[-1]
        if scale == 'B':
            amount = int(amount) * 1000000000
        elif scale == 'M':
            amount = int(amount) * 1000000

        return amount
    else:
        return value
print(unicorn_companies['Funding'])

# To plot a table showing top 10 companies with the highest ROI:
unicorn_companies['ROI'] = ((unicorn_companies['Valuation_B'] - unicorn_companies['Funding']) / unicorn_companies['Funding']) * 100
top_companies = unicorn_companies[['ROI','Company', 'Valuation_B', 'Funding']].dropna(subset=['Funding'])
top_companies = top_companies[top_companies['Funding'] != 0]
top_companies_sorted = top_companies.sort_values(by='ROI', ascending=False)
top_10_rows = top_companies_sorted.head(10)
print(top_10_rows)

fig, ax = plt.subplots()
Companies = top_10_rows['Company']
ROI_values = (top_10_rows['ROI'])
ax.bar(Companies, ROI_values)
ax.set_title('Top 10 Companies by ROI(%)')
ax.set_xlabel('Companies')
ax.set_ylabel('ROI(%)')
plt.xticks(rotation=90)
plt.show()


- From the chart above we can see that the company with the highest return on investment is Zapier

### Length of time it takes to become a unicorn

# To Create a column for the year these companies joined:
#First convert the date column to a date time format
unicorn_companies['Date Joined'] = pd.to_datetime(unicorn_companies['Date Joined'])
#Then seperate the year from the month and day
unicorn_companies['Year Joined'] = unicorn_companies['Date Joined'].dt.year
unicorn_companies['Year Joined']

# To establish the length of time it takes to become a unicorn company
# first clean the year founded column
null_values = unicorn_companies['Year Founded'].isnull().sum()
empty_values = (unicorn_companies['Year Founded'] == '').sum()
unicorn_companies['Length_of_time'] = ((unicorn_companies['Year Joined']) - (unicorn_companies['Year Founded']))
unicorn_companies['Length_of_time']

# to establish the average length of time it takes to become a unicorn company
average_years = unicorn_companies['Length_of_time'].mean()
average_years_rounded = round(average_years, 1)
print(average_years_rounded)

- The average length of time it takes to become a unicorn company is 7years

# To create a scatter plot demonstrating how long to it took the companies to become unicorn
plt.scatter(unicorn_companies_sorted.index, unicorn_companies['Length_of_time'], label='Years to Unicorn')

# Add a horizontal line for the mean
plt.axhline(y=average_years_rounded, color='red', linestyle='--', label='Mean')

# Set labels and title
plt.xlabel('Index')
plt.ylabel('Years to Unicorn')
plt.title('Relationship between number of Years to become Unicorn and Mean')

# Display the legend
plt.legend()

# Show the plot
plt.show()


- Scatter plot showing the relationship between length of time taken for the companies to become unicorn and the mean.
- For most of the companies, both the oldest and youngest, the length of time it took them to become unicorn revolved around seven years except for few outliers.

# To arrange the year founded column  to age, starting from the oldest
unicorn_companies_sorted = unicorn_companies.sort_values(by='Year Founded')
unicorn_companies_sorted = unicorn_companies_sorted.reset_index(drop=True)
print(unicorn_companies_sorted['Year Founded'])

null_values = unicorn_companies['Year Founded'].isnull().sum()
empty_values = (unicorn_companies['Year Founded'] == '').sum()

#to plot a table showing top 10 countries by number of unicorn companies
countries_by_companies = unicorn_companies.groupby('Country').size().reset_index(name='Count of companies')
# Sort the data by the count in descending order
countries_by_companies = countries_by_companies.sort_values('Count of companies', ascending=False).head(10)

# Print the grouped data
print(countries_by_companies)

fig, ax = plt.subplots()
Countries = countries_by_companies['Country']
companies = (countries_by_companies['Count of companies'])
ax.bar(Countries, companies)
ax.set_title('Top 10 Countries by unicorn companies')
ax.set_ylabel('No of unicorn companies')
ax.set_xlabel('Countries')
plt.xticks(rotation=90)
plt.show()

- From the above graph, we can see that the country with highest number of unicorn companies is the USA followed by china and india respectively

# To demonstrate cities with the highest number of unicorn companies(Top 10):
cities_by_companies = unicorn_companies.groupby('City').size().reset_index(name='Count of companies')
# Sort the data by the count in descending order
cities_by_companies = cities_by_companies.sort_values('Count of companies', ascending=False).head(10)

print(cities_by_companies)

#To plot a bar chart demonstrating the above information:
fig, ax = plt.subplots()
Countries = cities_by_companies['City']
companies = (cities_by_companies['Count of companies'])
ax.bar(Countries, companies)
ax.set_title('Top 10 Cities by unicorn companies')
ax.set_ylabel('No of unicorn companies')
ax.set_xlabel('Cities')
plt.xticks(rotation=90)
plt.show

- San Francisco and new york seem to be the biggest industries hub by the number of unicorn companies there followed closely by beijing.

# Investors with the most unicorns
investors_by_companies = unicorn_companies.groupby('Select Investors').size().reset_index(name='Count of companies')
# Sort the data by the count in descending order
investors_by_companies = investors_by_companies.sort_values('Count of companies', ascending=False).head(10)

# Print the grouped data
print(investors_by_companies)

fig, ax = plt.subplots()
Investors = investors_by_companies['Select Investors']
No_of_unicorns = (investors_by_companies['Count'])
ax.barh(Investors, No_of_unicorns)
ax.set_title('Top 5 Investors by unicorn companies')
ax.set_ylabel('Investors')
ax.set_xlabel('No of Unicorn companies')
plt.xticks(rotation=0)
plt.show()


- From the table above we can conclude that the investor with the highest number of unicorn companies in their portfolio is Sequoia Capitals

- Calculate the average valuation and funding amounts for unicorn companies in each industry and geographical region. This analysis will help prioritize investment in companies with a track record of significant growth and attract potential investors looking for high returns.

# The median valuation of unicorn companies:
median_valuation = unicorn_companies['Valuation_B'].median()
median_Valuation_rounded = round(median_valuation, 1)
# Print the median valuation
print(median_valuation)


- The median valuation of unicorn companies in our data set is 2Billion dollars

# univariate analysis
# Industry Sector
plt.figure(figsize=(10, 6))
sns.countplot(data=unicorn_companies, x='Industry')
plt.title('Distribution of Industry Sectors')
plt.xlabel('Industry Sector')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()


countries_by_companies = unicorn_companies.groupby('Country').size().reset_index(name='Count')
# Sort the data by the count in descending order
Countries_by_companies_sorted = countries_by_companies.sort_values('Count', ascending=False).head(10)

# Print the grouped data
print(Countries_by_companies_sorted)

# Drop rows with missing values
data = unicorn_companies.dropna()
# Sort the data by valuation in descending order
data_sorted = data.sort_values(by='Valuation_B', ascending=False)
# Get the top 20 unicorn companies by valuation
top_20_unicorns = data_sorted.head(20)

# Valuation by Funding for Top 20 Unicorn Companies
plt.figure(figsize=(12, 6))
sns.barplot(data=top_20_unicorns, x='Company', y='Valuation_B', hue='Funding')
plt.title('Valuation by Funding for Top 20 Unicorn Companies')
plt.xlabel('Company')
plt.ylabel('Valuation')
plt.xticks(rotation=90)
plt.legend(title='Funding')
plt.show()


#To calculate the top 20 countries by their unicorn companies' valuation:
# Drop rows with missing values
data = unicorn_companies.dropna()

# Group the data by country and calculate the total valuation
country_totals = data.groupby('Country').agg({'Valuation_B': 'sum'}).reset_index()

# Sort the data by valuation in descending order
country_totals_sorted = country_totals.sort_values(by='Valuation_B', ascending=False)

# Get the top 20 countries by valuation
top_20_countries = country_totals_sorted.head(20)

# Valuation by Country for Top 20
plt.figure(figsize=(12, 6))
sns.barplot(data=top_20_countries, x='Country', y='Valuation_B')
plt.title('Valuation by Country (Top 20)')
plt.xlabel('Country')
plt.ylabel('Valuation')
plt.xticks(rotation=90)
plt.show()


data = unicorn_companies.dropna()
# Group the data by industry sector and calculate the total valuation and funding
industry_totals = data.groupby('Industry').agg({'Valuation_B': 'sum', 'Funding': 'sum'}).reset_index()

# Sort the data by valuation in descending order
industry_totals_sorted = industry_totals.sort_values(by='Valuation_B', ascending=False)

# Get the top 20 industry sectors by valuation
top_20_industries = industry_totals_sorted.head(20)

# Valuation and Funding by Industry Sector for Top 20
plt.figure(figsize=(12, 6))
sns.barplot(data=top_20_industries, x='Industry', y='Valuation_B', hue='Funding')
plt.title('Valuation and Funding by Industry Sector (Top 20)')
plt.xlabel('Industry Sector')
plt.ylabel('Valuation')
plt.xticks(rotation=90)
plt.legend(title='Funding')
plt.show()


- From the chart above we observe that fintech and internet software services attracts the biggest funding, followed closely by E-commerce and artificiial intelligence.

#Valuation, Funding, and Country
plt.figure(figsize=(10, 6))
sns.scatterplot(data=unicorn_companies.dropna(), x='Funding', y='Valuation_B', hue='Country')
plt.title('Valuation and Funding by Country')
plt.xlabel('Funding')
plt.ylabel('Valuation')
plt.legend(title='Country')
plt.show()

- From the chart above we can see that well funded companies in china and the united states have the biggest valuations

## Our Recommendations:
- Companies aspiring to become unicorns should establish their presence in countries like USA and china as these countries probably have better conditions that have allowed greater number of unicorn companies to emerge compared to other countries.
- Companies aspiring to become unicorn should try to get funding from the likes of Sequoia Capital, Speedinvest, Valar Ventures, Uniqa Ventures as they are the leading investors by their unicorn company portfolio.
- investing in fintech and software services sector is very likely to yield greater return on investments as there are much more unicorn companies in these sectors compared to other sectors.
- There doesnt seem to be any tangible relationship between the age of a company and its valuation. However, the average number of years it takes a company to become a unicorn company is 7 years. Companies aspiring to become unicorn should be able to demonstrate good leadership that will ensure the companies longevity beyond that average. 

